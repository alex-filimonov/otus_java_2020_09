/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.otus;

import com.sun.management.GarbageCollectionNotificationInfo;

import javax.management.MBeanServer;
import javax.management.NotificationEmitter;
import javax.management.NotificationListener;
import javax.management.ObjectName;
import javax.management.openmbean.CompositeData;
import java.lang.management.GarbageCollectorMXBean;
import java.lang.management.ManagementFactory;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.Scanner;


public class App {

    private static long lifeTime;
    private static  List<GarbageCollectionNotificationInfo> gcInfoStatistics = new ArrayList<>();

    public static void main(String... args) throws Exception {

        System.out.println("Starting pid: " + ManagementFactory.getRuntimeMXBean().getName());
        System.out.println("STOP FOR VISUAL VM press enter");
        System.in.read();
        switchOnMonitoring();
        long beginTime = System.currentTimeMillis();

        int size = 5 * 1000 * 1000;
        int loopCounter = 1000;
        //int loopCounter = 100000;
        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
        ObjectName name = new ObjectName("ru.otus:type=Benchmark");

        Benchmark mbean = new Benchmark(loopCounter);
        mbs.registerMBean(mbean, name);
        mbean.setSize(size);

        try{
            mbean.run();
        } catch (OutOfMemoryError e) {
            System.out.println(e.getMessage());
        }

        System.out.println("WORK TIME:" + (System.currentTimeMillis() - beginTime));
        Result(mbean);
    }

    private static void Result(BenchmarkMBean mBean) {
        System.out.println("Result:");

        Map<Long, Double> gcTime = gcInfoStatistics.stream().collect(Collectors.groupingBy(
                gcNotif -> gcNotif.getGcInfo().getStartTime() / 60_000,
                Collectors.summingDouble(gcDur -> gcDur.getGcInfo().getDuration())
        ));

        Map<String, Long> gcCnt = gcInfoStatistics.stream().collect(Collectors.groupingBy(
                GarbageCollectionNotificationInfo::getGcName,
                Collectors.counting()
        ));

        Map<String, Double> gcDuration = gcInfoStatistics.stream().collect(Collectors.groupingBy(
                GarbageCollectionNotificationInfo::getGcName,
                Collectors.summingDouble(gcDur -> gcDur.getGcInfo().getDuration())
        ));

        Long SumDur = gcInfoStatistics.stream().mapToLong(
                gcTimeDur -> gcTimeDur.getGcInfo().getDuration()
        ).sum();

        System.out.println("Total time work: " + SumDur + "ms");
        System.out.println("Count elements add to list: " + mBean.getElementCounterAdd());

        for (Map.Entry<String,Long> entry: gcCnt.entrySet()){
            System.out.println("Name GC: " + entry.getKey() + " count starts:" + entry.getValue().toString()+" time works "+gcDuration.get(entry.getKey()));
        }


        for (Map.Entry<Long,Double> entry: gcTime.entrySet()){
            System.out.println(entry.getKey().toString() + " min GC work:" + entry.getValue().toString()+" ms");
        }
    }


    private static void switchOnMonitoring() {
        List<GarbageCollectorMXBean> gcbeans = java.lang.management.ManagementFactory.getGarbageCollectorMXBeans();
        for (GarbageCollectorMXBean gcbean : gcbeans) {
            System.out.println("GC name:" + gcbean.getName());
            NotificationEmitter emitter = (NotificationEmitter) gcbean;
            NotificationListener listener = (notification, handback) -> {
                if (notification.getType().equals(GarbageCollectionNotificationInfo.GARBAGE_COLLECTION_NOTIFICATION)) {
                    GarbageCollectionNotificationInfo info = GarbageCollectionNotificationInfo.from((CompositeData) notification.getUserData());
                    gcInfoStatistics.add(info);
                    String gcName = info.getGcName();
                    String gcAction = info.getGcAction();
                    String gcCause = info.getGcCause();

                    long startTime = info.getGcInfo().getStartTime();
                    long duration = info.getGcInfo().getDuration();

               //     System.out.println("start:" + startTime + " Name:" + gcName + ", action:" + gcAction + ", gcCause:" + gcCause + "(" + duration + " ms)");
                }
            };
            emitter.addNotificationListener(listener, null, null);
        }
    }
}
